#!/usr/bin/env ruby


require "bundler/setup" #setting up load paths to require the gems in gemspec. #different from bundler require.  
require "pry" 
require_relative "../lib/natgeo" 

NatGeo::CLI.new.start 


#START HERE
#line 1 - shabang
#shabang - telling bash this is ruby.  exec files need to know to interpet the files as ruby. 
#exec files run through the bash shell and need to be told this is a ruby file. 
#will need the shabang to deploy gems. 


#line 4 - require vs require_relative
#require is a method that is used when you want to reference and execute code that is not 
#written in your current file. The method takes in a path in the form of a string as 
#an argument and there are two ways the string can be formatted â€” either as an
#absolute path or a shortened name.
#Listing your directory in $LOAD_PATH allows for flexibility and could load your external 
#file even if you were to move it into a different folder. 
#Each of these lines represents a directory on your computer where Ruby files are stored. 
#If you use require anywhere in your application (e.g. require "digest") then Ruby will 
#look for a Ruby file with the same name (e.g. digest.rb) in each of these directories. 
#It will load the first file with this name that it can find.


API CLASS
require 'pry'
require 'net/http'
require 'json'

module NatGeo 
    class API
    #stores API endpoint URL in a constant at the top of the class
   
        URL = "https://newsapi.org/v2/top-headlines?sources=national-geographic&apiKey="

        def self.get_stories 
            uri = URI.parse(URL+api_key)
            response = Net::HTTP.get_response(uri) #string 
            JSON.parse(response.body)["articles" 
        end    
            
        def self.api_key
            begin 
                @@key = File.open(File.expand_path("~/.news-api-key")).read.strip 
            rescue 
                puts "Whoops! Looks like you have not added your API key"
                puts "Post it here"
                
                @@key = gets.strip   
                return if @@key == "exit"
                File.open(File.expand_path("~/.news-api-key"), "w") do |file|
                    file.print @@key 
                end 
            end 
            @@key 
        end 
    end 
end 
  

CLI CLASS 

# module NatGeo
#     class CLI 

#         def start
#             line_spacing
#             puts "Welcome to this National Geographic gem!"
#             Story.load_stories
#             stories
#             list_stories
#             pick_story
#             stories_operator unless @input == "exit"

#             # while @input != "exit"
#             #     stories_operator

#                 # if @input == "read"
#                 #     list_stories
#                 #     stories_operator
#                 # end 
#             # end  
#             goodbye
#         end

#         def goodbye
#            puts "Thanks for reading! Goodbye! "
#         end 

#         def stories    
#             puts "These are the top picks of the day. Please choose an article to read."
#         end 

#         def stories_operator 
#             # stories
#             # list_stories
#             pick_story
#             while @input != "exit" 
#             #&& @input != "read"
#                 if @input.between?(1,10)
#                     Story.find_users_choice(@input).get_details
#                 else 
#                     puts "Wrong entry! Please try again!"
#                 end 
#                 choice
#             end        
#         end 

#         def list_stories 
#             Story.all.each.with_index(1) do |story, index|
#                 puts "#{index}. #{story.title}."
#             end 
#         end 

        
#         def pick_story
#             @input = gets.chomp.to_i 

#             # if !@input.between?(1,10)
#             #     puts "Wrong entry! Please try again!"
#             #     pick_story
#             # elsif
#             #     Story.find_users_choice(@input).get_details
#             # end    
#         end 


#         def choice 
#             puts "Would you like to keep reading or exit the program? Type read or exit"
#             input = gets.chomp
#             # line_spacing
#             # if input == "read"
#             #     list_stories
#             #     #pick_story
#             # elsif input == "exit"
#             #     exit 
#             # else 
#             #     pick_story
#             # end
#         end 
    

#         def line_spacing
#             puts ""
#         end   
#     end
# end 

CLI CLASS
equire 'pry'

module NatGeo
    class CLI 

        def start 
            line_spacing
            puts "WELCOME TO THIS NATIONAL GEOGRAPHIC GEM!"
            Story.load_stories #makes the api call and display the list of top 10. 
            stories 
        end 
#only trying to make just one api call 
#dont want to do to many api calls, discuss in blog. setup the loop for that purpose. 

        def stories
            line_spacing
            puts "These are the top stories of the day!" 
            line_spacing  
            list_stories
            line_spacing 
            pick_a_story
        end 
#this puts out all the top picks of the day and then shows off all of the stories
#trying to use this for the loop 
        def list_stories
            Story.all.each.with_index(1) do |story, index|
                puts "#{index}. #{story.title}"
            end
        end 

        def pick_a_story
            puts "Choose an article by the number to read further."
            input = gets.chomp.to_i

            if !input.between?(1,10)
                puts "Wrong entry! Please try again."
                list_stories
                pick_a_story
                # choice 
            elsif 
                Story.find_users_choice(input).get_details
            end
            choice
        end 


        def choice #mini loop 
            puts "Would you like to keep reading orthe program? Type read or no"
            input = gets.strip
            if input == "read"
              pick_a_story
            elsif input == "no"
              goodbye
              exit 
            else 
              puts "Error, please try again with the correct entry."
              choice
            end 
          end


        def goodbye
            puts "Thanks for reading! Goodbye!"
        end 

        
        def line_spacing
            puts ""
        end 
    end
end 

STORY CLASS 
require 'pry'

module NatGeo
   class Story
        attr_accessor  :title, :url, :description, :author

        @@all = []

        def initialize(attributes = {})
            attributes.each do |attribute_name, attribute_details|
            if self.respond_to?("#{attribute_name}=")
                self.send(("#{attribute_name}="), attribute_details)
                end
            end 
        end 

        def self.load_stories 
            api_data = API.get_stories
            @@all = create_stories(api_data)
        end 

        def self.create_stories(api_data)#nested hash 
            api_data.collect do |article_hash|
            self.new(article_hash)     
            end  
        end 

        def self.find_users_choice(input) 
            self.all[input.to_i-1]
        end 
#checking the array to_i-1 

        def get_details
            puts ""
            puts "TITLE: #{self.title}"
            puts "DESCRIPTION: #{self.description}."
            puts "FULL STORY URL: #{self.url}" 
            puts ""
        end 

        def self.clear
            @@all.clear
        end

        def self.all 
            @@all 
        end 
    end 
end 

API CLASS 
require 'pry'
require 'net/http'
require 'json'

module NatGeo 
    class API
   
        URL = "https://newsapi.org/v2/top-headlines?sources=national-geographic&apiKey="

        def self.get_stories 
            uri = URI.parse(URL+api_key)
            response = Net::HTTP.get_response(uri) #string 
            JSON.parse(response.body)["articles"] 
        end    
            
        def self.api_key
            begin 
                @@key = File.open(File.expand_path("~/.news-api-key")).read.strip 
            rescue 
                puts "Whoops! Looks like you have not added your API key"
                puts "Post it here"
                
                @@key = gets.strip   
                return if @@key == "exit"
                File.open(File.expand_path("~/.news-api-key"), "w") do |file|
                    file.print @@key   
                end
            end
            @@key  
        end
    end 
end 

