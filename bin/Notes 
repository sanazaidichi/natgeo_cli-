#!/usr/bin/env ruby


require "bundler/setup" #setting up load paths to require the gems in gemspec. #different from bundler require.  
require "pry" 
require_relative "../lib/natgeo" 

NatGeo::CLI.new.start 


#START HERE
#line 1 - shabang
#shabang - telling bash this is ruby.  exec files need to know to interpet the files as ruby. 
#exec files run through the bash shell and need to be told this is a ruby file. 
#will need the shabang to deploy gems. 


#line 4 - require vs require_relative
#require is a method that is used when you want to reference and execute code that is not 
#written in your current file. The method takes in a path in the form of a string as 
#an argument and there are two ways the string can be formatted â€” either as an
#absolute path or a shortened name.
#Listing your directory in $LOAD_PATH allows for flexibility and could load your external 
#file even if you were to move it into a different folder. 
#Each of these lines represents a directory on your computer where Ruby files are stored. 
#If you use require anywhere in your application (e.g. require "digest") then Ruby will 
#look for a Ruby file with the same name (e.g. digest.rb) in each of these directories. 
#It will load the first file with this name that it can find.


API CLASS
require 'pry'
require 'net/http'
require 'json'

module NatGeo 
    class API
    #stores API endpoint URL in a constant at the top of the class
   
        URL = "https://newsapi.org/v2/top-headlines?sources=national-geographic&apiKey="

        def self.get_stories 
            uri = URI.parse(URL+api_key)
            response = Net::HTTP.get_response(uri) #string 
            JSON.parse(response.body)["articles" 
        end    
            
        def self.api_key
            begin 
                @@key = File.open(File.expand_path("~/.news-api-key")).read.strip 
            rescue 
                puts "Whoops! Looks like you have not added your API key"
                puts "Post it here"
                
                @@key = gets.strip   
                return if @@key == "exit"
                File.open(File.expand_path("~/.news-api-key"), "w") do |file|
                    file.print @@key 
                end 
            end 
            @@key 
        end 
    end 
end 
  